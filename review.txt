netease react 项目
    hash 替换  - HashedModuleIdsPlugin（用路劲来映射module id） ，在加入引入一个新模块的时候，导致打包的chunkhash 全都变了的问题
    dllplugin - 单独打包vendor 生成manifest.json 给 DllReferencePlugin用
    commonChunkPlugin - 提出webpack 的一些运行时代码（用来解析和加载模块），导致修改比如根组件的代码，vendor的hash 也变了
    gulp 的return 的问题 - 不return这个stream 的话，该task的异步结果不会等待dependence task执行完

    异步请求更新状态问题

chuanhua react 项目
    fetch 并不是很好使用的问题  -  axios
    异步action 处理的问题 - dva


react-router 源码
redux 
    - 中间件代理createStore ,修改默认dispatch
    - modifer还可以代理reducer, 提出公共逻辑


dva （redux-saga , react-router,react-router-redux , react-async-component (组件动态加载)）
   - redux-saga
   - effects 
        - call 声明一个effect，返回一个描述 action 的纯文本对象，便于测试,不需要真的发起ajax 来测试
        - put 创建并yield 一个 dispatch effect，同样也是便于测试



mobx vs redux
https://zhuanlan.zhihu.com/p/25989654


npm link /cache
	http://www.cnblogs.com/CyLee/p/6195022.html


yield /await 
    co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象
    而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）
    async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 


libfe
    网易
        - 1px 不是物理1px, clientWidth/6.4 
    淘宝
        - 1px 是物理1px , clientWidth/10
css
    bfc - 级块上下文
    flex - ie10+ （-ms-支持）
        flex-direction ----\  flex-flow
        flex-wrap      ----/
        justify-content  水平对齐方式
        align-items    垂直对齐方式
        align-content  多根轴线的对齐方式

        
        order  排列顺序
        flex-grow  默认为0 瓜分剩余空间  ---- \
        flex-shrink 空间不足将缩小       ----  | -  flex:1 1 auto; flex:0 0 auto;
        flex-basis 项目占据主轴的空间    ---- / 
        align-self 单独设置一个item 的垂直对齐方式

    双飞翼布局 - margin 百分比相对于包含块的宽度
    
    http://www.cnblogs.com/zhaodongyu/p/3341080.html

tcp
    3次握手
    4次分手

https
    ssl/tls对数据进行加密
    数据传输是对称加密，握手过程加密生成的密码是非对称


用qq/sina登录
    当你用qq登录第三方应用时， qq返回token 给第三方应用,第三方应用可以根据这个token 来访问qq的开放api提供的用户信息（这些信息当然你可以授权哪些，比如头像，昵称等）    

xss
    - 防御：内联事件拦截,csp,htmlencode | MutationObserver 监听可疑的外部模块
    - 反射型， 存储型（上传svg onload 里有payload）， dom 型（url 参数等）
    https://www.zhihu.com/question/21979782
csrf
    - 防御：检查http header referer 字段，添加验证码，使用一次性token（结合xss，都有可能无效）

装饰模式（react redux - connect）， 门面模式,代理模式，发布订阅模式


node 模块
    - 普通模块 ，供代码使用
    - 二进制模块， 供cli 调用
    http://www.cnblogs.com/CyLee/p/6195022.html

    module.exports / exports   两者都是模块级别的变量
        - 前者的exports是一个引用， 后者的exports是一个变量,只是一个快捷方式，这个变量一开始被赋值为 module.exports，而赋值给module.exports 的东西才可以导出，
          直接赋值给exports 的东西是无法导出的，除非 再把exports 赋给 module.exports。



    tcp 支持本地数据通信， 还可以跨网络的进程间通信（ip地址 + 端口号 标识唯一的一个进程，而IP地址 + 端口号就称为socket）
    net 模块即是用来创建 tcp /ipc 服务器 、 客户端的

    __dirname 当前模块的文件夹名称  __filename 当前模块的 文件名称
    process.cwd()  进程当前工作的目录

    event loop 
        - 浏览器端
            主线程执行完后才读取任务队列
        - node 端
            V8 解析js -- 调用node api -- libuv 负责执行api ,不同任务分配给不同线程  -- 将结果以异步方式返回给 V8



http code
    204 - no content 可以节省数据传输,403


koa/express 异常处理
    koa - 使用‘error' 事件，如果你不指定‘error’ 监听，则调用内部默认的error处理，只是log error message
        - 使用try - catch
        - 中间件统一处理

    this.throw 把错误信息直接暴露给用户
    Promise 里throw 的东西也可以catch 到，并打印出来 (http://efe.baidu.com/blog/promises-anti-pattern/)




regular 
    two - way bind  - change / input 事件修改watch 的表达式的值，然后再手动触发脏检查
    diff 最短编辑路劲算法

    有时候都需要手动触发脏检查-除了事件等

    脏检查
        完全不关心你改变数据的方式
        实现批处理完数据之后，再去统一更新view
        实现任意复杂度的表达式支持




npm package.json
    http://ju.outofmemory.cn/entry/130809
    peerDependency








//////////////////////////////////

redux
    大型应用可测试性也是很重要的，react 比较倡导 'pure' - 不去尝试改变它的输入，相同的输入总有相同的输出。
    函数式编程可能就是一种以pure 的function 为子元素的编程方式。
    redux里也是各种体现：immutable,middleware 机制等 - 可预测，可测试



我要怎么实现？
    redux
    mobx
    react-router
    

整体工程化

安全

dom diff

node 调试- 分析
    增量mark lazy sweep



react 流式渲染

seo



////////////////////////////

当数据源比较多并且有相互依赖关系的时候，可以把每个数据源当成一个Observable(一个数据管道)，然后再合并，然后只要订阅这个总的observable就行，不需要关注数据源来源。

keywords: react/redux --- lift state up(2waybind)   
                |
                |__ side-effects:  异步流程控制，一个异步依赖另一个异步 | 视图上发起一个操作，要修改全局状态树的不同位置
                |
            mobx rxjs 

            react-router  
            移动端   
            vue原理  
            canvas  
            webpack

dva redux-middleware redux-immutable redux-observable(rxjs) 

js css basics
块级上下文
http://web.jobbole.com/83149/

webpack
react redux


移动端兼容问题
http://blog.csdn.net/hardgirls/article/details/51722519



eleme pwa
https://huangxuan.me/2017/07/12/upgrading-eleme-to-pwa/

如果只是为了seo 可以采用 prerender-spa-plugin 
多页应用
    PUSH/PRELOAD RENDER  PRE-CACHE LAZY-LOAD 
    巨大的 JavaScript 重启开销
    V8 提供了代码缓存（code caching），可以将编译后的机器码在本地拷贝一份
    进退缓存（chrome 不支持）
    

单页应用









